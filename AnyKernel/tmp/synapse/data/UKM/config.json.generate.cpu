cat << CTAG
{
	name:CPU,
		elements:[
			`if [ 2 == 1 ]; then
				$BB echo '{ SPane:{
					title:"Current CPU Frequency:"
				}},
				{ SLiveLabel:{
					refresh:500,
					style:italic,
					action:"live CPUFrequency"
				}},'
			fi`
			{ STitleBar:{
				title:"CPU Frequency Scaling"
			}},
				`if [ ! -f "/sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_all_cpus" ]; then
					$BB echo '{ SSeekBar:{
						title:"CPU Min Frequency",
						description:"Set the minimum frequency the CPU scales down to.",
						default:'\`sh $DEVICE DefaultCPUMinFrequency\`',
						action:"cpuset '\`sh $DEVICE DirCPUMinFrequency\`'",
						values:{'
							sh $DEVICE CPUFrequencyList
						$BB echo }'
					}},'
				else
					$BB echo '{ SSeekBar:{
						title:"CPU0 Min Frequency",
						description:"Set the minimum frequency the CPU0 scales down to.",
						default:'\`cat /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_all_cpus\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_all_cpus",
						notify:[
								{
									on:APPLY,
									do:[ REFRESH, APPLY ],
									to:[
										"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu1",
										"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu2",
										"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu3"
									]
								}
							],
						values:{'
							sh $DEVICE CPUFrequencyList
						$BB echo '}
					}},
					{ SSeekBar:{
						title:"CPU1 Min Frequency",
						description:"Set the minimum frequency the CPU1 scales down to.",
						default:'\`cat /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu1\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu1",
						values:{'
							sh $DEVICE CPUFrequencyList
						$BB echo '}
					}},
					{ SSeekBar:{
						title:"CPU2 Min Frequency",
						description:"Set the minimum frequency the CPU2 scales down to.",
						default:'\`cat /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu2\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu2",
						values:{'
							sh $DEVICE CPUFrequencyList
						$BB echo '}
					}},
					{ SSeekBar:{
						title:"CPU3 Min Frequency",
						description:"Set the minimum frequency the CPU3 scales down to.",
						default:'\`cat /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu3\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_min_freq_cpu3",
						values:{'
							sh $DEVICE CPUFrequencyList
						$BB echo '}
					}},'
				fi`
				`if [ ! -f "/sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_all_cpus" ]; then
					$BB echo '{ SSeekBar:{
						title:"CPU Max Frequency",
						description:"Set the maximum frequency the CPU scales down to.",
						default:'\`sh $DEVICE DefaultCPUMaxFrequency\`',
						action:"cpuset '\`sh $DEVICE DirCPUMaxFrequency\`'",
						values:{'
							sh $DEVICE CPUFrequencyList
						$BB echo }'
					}},'
				else
					$BB echo '{ SSeekBar:{
						title:"CPU0 Max Frequency",
						description:"Set the maximum frequency the CPU0 scales down to.",
						default:'\`cat /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_all_cpus\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_all_cpus",
						notify:[
								{
									on:APPLY,
									do:[ REFRESH, APPLY ],
									to:[
										"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu1",
										"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu2",
										"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu3"
									]
								}
							],
						values:{'
							sh $DEVICE CPUFrequencyList
						$BB echo '}
					}},
					{ SSeekBar:{
						title:"CPU1 Max Frequency",
						description:"Set the maximum frequency the CPU1 scales down to.",
						default:'\`cat /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu1\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu1",
						values:{'
							sh $DEVICE CPUFrequencyList
						$BB echo '}
					}},
					{ SSeekBar:{
						title:"CPU2 Max Frequency",
						description:"Set the maximum frequency the CPU2 scales down to.",
						default:'\`cat /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu2\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu2",
						values:{'
							sh $DEVICE CPUFrequencyList
						$BB echo '}
					}},
					{ SSeekBar:{
						title:"CPU3 Max Frequency",
						description:"Set the maximum frequency the CPU3 scales down to.",
						default:'\`cat /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu3\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_max_freq_cpu3",
						values:{'
							sh $DEVICE CPUFrequencyList
						$BB echo '}
					}},'
				fi`
				`if [ -f "/sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq" ]; then
				SOMF=\`$BB cat /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq\`
					$BB echo '{ SSeekBar:{
						title:"CPU Max Screen Off Frequency",
						description:"Set the maximum frequency the CPU scales up to when the screen is off.",
						default:'$SOMF',
						action:"generic /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq",
						values:{'
							sh $DEVICE CPUFrequencyList
						$BB echo '}
					}},'
				fi`
				`if [ -f "/sys/devices/system/cpu/sched_mc_power_savings" ]; then
				SMPS=\`$BB cat /sys/devices/system/cpu/sched_mc_power_savings\`
					$BB echo '{ SPane:{
						title:"CPU Multicore Power Saving",
						description:"Try to group tasks into the least cores possible. The higher the value, the more aggressive the grouping."
					}},
					{ SOptionList:{
						default:'$SMPS',
						action:"generic /sys/devices/system/cpu/sched_mc_power_savings",
						values:{ 0:"Disabled", 1:"Enabled", 2:"Aggressive"
						}
					}},'
				fi`
			{ SPane:{
				title:"CPU Governor",
				description:"The CPU governor determines how the CPU behaves in response to changes in workload. More info: <a href='http://timos.me/tm/wiki/cpugovernors'>HERE</a>"
			}},
				`if [ ! -f "/sys/devices/system/cpu/cpufreq/all_cpus/scaling_governor_all_cpus" ]; then
					$BB echo '{ SOptionList:{
						default:'\`sh $DEVICE DefaultCPUGovernor\`',
						action:"cpuset '\`sh $DEVICE DirCPUGovernor\`'",
						values:['
							sh $DEVICE CPUGovernorList
						$BB echo '],
						notify:[
							{
								on:APPLY,
								do:[ REFRESH, CANCEL ],
								to:"'\`sh $DEVICE DirCPUGovernorTree\`'"
							},
							{
								on:REFRESH,
								do:REFRESH,
								to:"'\`sh $DEVICE DirCPUGovernorTree\`'"
							}
						]
					}},'
				else
					$BB echo '{ SOptionList:{
						title:"CPU0",
						default:'\`sh $DEVICE DefaultCPUGovernor\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_governor_all_cpus",
						values:['
							sh $DEVICE CPUGovernorList
						$BB echo '],
						notify:[
							{
								on:APPLY,
								do:[ REFRESH, APPLY ],
								to:[
									"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_governor_cpu1",
									"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_governor_cpu2",
									"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_governor_cpu3",
								]
							}
							{
								on:APPLY,
								do:[ REFRESH, CANCEL ],
								to:"'\`sh $DEVICE DirCPUGovernorTree\`'"
							},
							{
								on:REFRESH,
								do:REFRESH,
								to:"'\`sh $DEVICE DirCPUGovernorTree\`'"
							}
						]
					}},
					{ SOptionList:{
						title:"CPU1",
						default:'\`sh $DEVICE DefaultCPUGovernor\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_governor_cpu1",
						values:['
							sh $DEVICE CPUGovernorList
						$BB echo '],
						notify:[
							{
								on:APPLY,
								do:[ REFRESH, CANCEL ],
								to:"'\`sh $DEVICE DirCPUGovernorTree\`'"
							},
							{
								on:REFRESH,
								do:REFRESH,
								to:"'\`sh $DEVICE DirCPUGovernorTree\`'"
							}
						]
					}},
					{ SOptionList:{
						title:"CPU2",
						default:'\`sh $DEVICE DefaultCPUGovernor\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_governor_cpu2",
						values:['
							sh $DEVICE CPUGovernorList
						$BB echo '],
						notify:[
							{
								on:APPLY,
								do:[ REFRESH, CANCEL ],
								to:"'\`sh $DEVICE DirCPUGovernorTree\`'"
							},
							{
								on:REFRESH,
								do:REFRESH,
								to:"'\`sh $DEVICE DirCPUGovernorTree\`'"
							}
						]
					}},
					{ SOptionList:{
						title:"CPU3",
						default:'\`sh $DEVICE DefaultCPUGovernor\`',
						action:"generic /sys/devices/system/cpu/cpufreq/all_cpus/scaling_governor_cpu3",
						values:['
							sh $DEVICE CPUGovernorList
						$BB echo '],
						notify:[
							{
								on:APPLY,
								do:[ REFRESH, CANCEL ],
								to:"'\`sh $DEVICE DirCPUGovernorTree\`'"
							},
							{
								on:REFRESH,
								do:REFRESH,
								to:"'\`sh $DEVICE DirCPUGovernorTree\`'"
							}
						]
					}},'
				fi`
			{ SPane:{
				title:"CPU Governor Tunables"
			}},
				{ STreeDescriptor:{
					path:"`sh $DEVICE DirCPUGovernorTree`",
					generic: {
						directory: {
							STreeDescriptor:{
								generic: {
									directory: {},
									element: {
										SGeneric: { title:"@BASENAME" }
									}
								},
								exclude: [ "boostpulse", "sampling_rate_min" ]
							},
						}
					},
					exclude: [ "overall_stats", "vdd_table", "all_cpus" ]
				}},
			{ STitleBar:{
		title:"CPU Boost",
		description:"When certain important tasks migrate from a fast CPU to a slow CPU, CPU Boost Driver boosts the frequency of the slow CPU to at least as high as the fast CPU for a short duration. You can modify behavior of CPU Boost Driver below. CPU Boost helps alleviating poor user experience by elevating frequencies when required."
	}},
	{ SSeekBar:{
       		title:"Input Boost Frequency",
		description:"Sets frequency to which idle CPU is boosted whenever there are incoming input/hotplug/wakeup_boost events. Hotplug and wakeboost events are identified only if enabled. Should be lesser or equal to Sync Threshold.",
		default:`cat /data/UKM/files/input_boost_freq`,
		action:"cpuboost",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
		title:"Input Boost Duration",
		description:"Sets period for which idle CPU is boosted whenever there are incoming input/hotplug/wakeup_boost events.",
		min:0, max:9000,
		default:`cat /sys/module/cpu_boost/parameters/input_boost_ms`,
		unit:" ms",
		action:"generic /sys/module/cpu_boost/parameters/input_boost_ms",
	}},
	{ SCheckBox:{
		label:"Hotplug Boost",
		description:"Hotplug Boost is similar to input boost but it occurs when CPUs go online.",
		default:1,
		action:"boolean /sys/module/cpu_boost/parameters/hotplug_boost",
	}},
	{ SCheckBox:{
		label:"Wakeup Boost",
		description:"Wakeup Boost is similar to input boost but it occurs when screen is turned on.",
		default:0,
		action:"boolean /sys/module/cpu_boost/parameters/wakeup_boost",
	}},
	]
}
CTAG
